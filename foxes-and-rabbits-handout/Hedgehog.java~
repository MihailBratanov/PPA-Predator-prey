 import java.util.List;
import java.util.Random;

/**
 * A simple model of a hedgehog.
 * Hedgehogs age, move, breed, and die.
 * 
 * @author David J. Barnes and Michael KÃ¶lling
 * @version 2016.02.29 (2)
 */
public class Hedgehog extends Herbivore
{
    // A shared random number generator to control breeding.
    private static final Random rand = Randomizer.getRandom();
    
    // The age to which a hedgehog can live.
    private static final int MAX_AGE = 40;
    // The food value of a single flower. In effect, this is the
    // number of steps a hedgehog can go before it has to eat again.
    private static final int FLOWER_FOOD_VALUE = 3;
    // The likelihood of a hedgehog breeding.
    private static final double BREEDING_PROBABILITY = 0.15;
    // The maximum litter size of a hedgehog.
    private static final int MAX_LITTER_SIZE = 4;
    // The age at which a hedgehog can start to breed.
    private static final int BREEDING_AGE = 5;
    // The likelihood of dying by a disease.
    private static final int DISEASE_FATALITY=3;
    
    // The hedgehog's age.
    private int age;
    // The hedgehog's food level, which is increased by eating flowers.
    private int foodLevelFlower;
    /**
     * Create a new hedgehog. A hedgehog may be created with age
     * zero (a new born) or with a random age.
     * 
     * @param randomAge If true, the rabbit will have a random age.
     * @param field The field currently occupied.
     * @param location The location within the field.
     */
    public Hedgehog(boolean randomAge, Field field, Location location)
    {
        super(field, location);
        age = 0;
        if(randomAge) {
            age = rand.nextInt(MAX_AGE);
        }
    }
    
    /**
     * Return age of a hedghog
     * @return age of a hedghog.
     */
    protected int getAge(){
       return age;
    }
    
    /**
     * Return maximum age of a hedgehog
     * @return maximum age of a hedgehog.
     */
    protected int getMaxAge(){
       return MAX_AGE;
    }
    
    /**
     * Return food value of a flower to a hedgehog
     * @return food value of a flower to a hedgehog.
     */
    protected int getFlowerFoodValue(){
        return FLOWER_FOOD_VALUE;
    }
    
    /**
     * Return food level of a flower to a hedgehog
     * @return food level of a flower to a hedgehog.
     */
    protected int getFlowerFoodLevel(){
        return foodLevelFlower;
    }
    
    /**
     * Return breeding probability of a hedgehog
     * @return breeding probability of a hedgehog.
     */
    protected double getBreedingProbability(){
       return BREEDING_PROBABILITY;
    }
    
    /**
     * Return maximum litter size of a hedgehog
     * @return maximum litter size of a hedgehog.
     */
    protected int getMaxLitterSize(){
       return MAX_LITTER_SIZE;
    }
    
    /**
     * Return breeding age of a hedgehog
     * @return breeding age of a hedghog.
     */
    protected int getBreedingAge(){
       return BREEDING_AGE;
    }
    
    /**
     * Return disease fatality of a squirrel
     * @return disease fatality of a squirrel.
     */
    protected int getDiseaseFatality(){
        return DISEASE_FATALITY;
    }
    
    /**
     * Check whether or not this hedgehog is to give birth at this step.
     * New births will be made into free adjacent locations.
     * @param newHedgehogs A list to return newly born hedgehogs.
     */
    public void giveBirth(List<Animal> newHedgehogs)
    {
        // New rabbits are born into adjacent locations.
        // Get a list of adjacent free locations.
        Field field = getField();
        List<Location> free = field.getFreeAdjacentLocations(getLocation());
        int births = breed();
        for(int b = 0; b < births && free.size() > 0; b++) {
            Location loc = free.remove(0);
            Hedgehog young = new Hedgehog(false, field, loc);
            newHedgehogs.add(young);
        }
    }
    
    /**
     * This is what the hedgehog does most of the time - it runs 
     * around. Sometimes it will breed or die of old age.
     * @param newHedgehogs A list to return newly born hedgehogs.
     */
    public void act(List<Animal> newHedgehogs)
    {
        incrementAge();
        if(isAlive()) {
            giveBirth(newHedgehogs);            
            // Try to move into a free location.
            Location newLocation = getField().freeAdjacentLocation(getLocation());
            if(newLocation != null) {
                setLocation(newLocation);
            }
            else {
                // Overcrowding.
                setDead();
            }
        }
    }
}
